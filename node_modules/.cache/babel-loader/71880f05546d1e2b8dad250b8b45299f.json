{"ast":null,"code":"import React, { useState, useRef, useEffect, useMemo, useImperativeHandle } from 'react';\nimport PlyrJS from 'plyr';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n/**\n * react aptor(api-connector) a hook which connect api to react itself\n * @param ref - react forwarded ref\n * @param {Object} configuration - configuration object for setup\n * @param {Array} [deps=[]] - react dependencies array\n * @return domRef - can be bound to dom element\n */\n\n\nfunction useAptor(ref, configuration, deps) {\n  if (deps === void 0) {\n    deps = [];\n  }\n\n  var _a = useState(null),\n      instance = _a[0],\n      setInstance = _a[1];\n\n  var domRef = useRef(null);\n  var instantiate = configuration.instantiate,\n      destroy = configuration.destroy,\n      getAPI = configuration.getAPI,\n      params = configuration.params;\n  useEffect(function () {\n    var instanceReference = instantiate(domRef.current, params);\n    setInstance(instanceReference);\n    return function () {\n      if (destroy) destroy(instanceReference, params);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var api = useMemo(function () {\n    return getAPI(instance, params);\n  }, [instance]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useImperativeHandle(ref, api, [api]);\n  return domRef;\n}\n/* REACT-APTOR */\n\n\nvar instantiate = function instantiate(node, _ref) {\n  var options = _ref.options,\n      source = _ref.source;\n  var plyr = new PlyrJS(node, options || {});\n  plyr.source = source;\n  return plyr;\n};\n\nvar destroy = function destroy(plyr) {\n  if (plyr) plyr.destroy();\n}; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\nvar noop = function noop() {};\n\nvar getAPI = function getAPI(plyr) {\n  if (!plyr) return function () {\n    return new Proxy({\n      plyr: {\n        source: null\n      }\n    }, {\n      get: function get(target, prop) {\n        if (prop === 'plyr') {\n          return target[prop];\n        }\n\n        return noop;\n      }\n    });\n  };\n  return function () {\n    return {\n      /**\n       * Plyr instance with all of its functionality\n       */\n      plyr: plyr\n    };\n  };\n};\n\nvar Plyr = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var source = props.source,\n      _props$options = props.options,\n      options = _props$options === void 0 ? null : _props$options,\n      rest = _objectWithoutProperties(props, [\"source\", \"options\"]);\n\n  var raptorRef = useAptor(ref, {\n    instantiate: instantiate,\n    getAPI: getAPI,\n    destroy: destroy,\n    params: {\n      options: options,\n      source: source\n    }\n  }, [options, source]);\n  return /*#__PURE__*/React.createElement(\"video\", _extends({\n    ref: raptorRef,\n    className: \"plyr-react plyr\"\n  }, rest));\n});\nPlyr.displayName = 'Plyr';\nPlyr.defaultProps = {\n  options: {\n    controls: ['rewind', 'play', 'fast-forward', 'progress', 'current-time', 'duration', 'mute', 'volume', 'settings', 'fullscreen'],\n    i18n: {\n      restart: 'Restart',\n      rewind: 'Rewind {seektime}s',\n      play: 'Play',\n      pause: 'Pause',\n      fastForward: 'Forward {seektime}s',\n      seek: 'Seek',\n      seekLabel: '{currentTime} of {duration}',\n      played: 'Played',\n      buffered: 'Buffered',\n      currentTime: 'Current time',\n      duration: 'Duration',\n      volume: 'Volume',\n      mute: 'Mute',\n      unmute: 'Unmute',\n      enableCaptions: 'Enable captions',\n      disableCaptions: 'Disable captions',\n      download: 'Download',\n      enterFullscreen: 'Enter fullscreen',\n      exitFullscreen: 'Exit fullscreen',\n      frameTitle: 'Player for {title}',\n      captions: 'Captions',\n      settings: 'Settings',\n      menuBack: 'Go back to previous menu',\n      speed: 'Speed',\n      normal: 'Normal',\n      quality: 'Quality',\n      loop: 'Loop'\n    }\n  },\n  source: {\n    type: 'video',\n    sources: [{\n      src: 'https://cdn.plyr.io/static/blank.mp4',\n      type: 'video/mp4',\n      size: 720\n    }, {\n      src: 'https://cdn.plyr.io/static/blank.mp4',\n      type: 'video/mp4',\n      size: 1080\n    }]\n  }\n};\nexport default Plyr;","map":null,"metadata":{},"sourceType":"module"}