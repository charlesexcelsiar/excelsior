{"ast":null,"code":"var _jsxFileName = \"/home/charles/React_JS_Reference/08-03-21/newExcelsior/excelsior/src/views/services/components/ChartSmallDoughnutChart2.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-underscore-dangle,no-unused-vars */\nimport React, { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Chart, registerables } from 'chart.js';\nimport { useSelector } from 'react-redux';\nimport { Col, Row } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChartSmallDoughnutChart2 = () => {\n  _s();\n\n  const {\n    themeValues\n  } = useSelector(state => state.settings);\n  const chartContainer = useRef(null);\n  const legendRef = useRef(null);\n  const SmallDoughnutChartPlugin = React.useMemo(() => {\n    return {\n      id: 'smallDoughnut',\n      afterDraw: (chart, args, options) => {\n        const {\n          ctx\n        } = chart;\n        const firstSegment = chart.getDatasetMeta(0).data[0];\n        const gap = (firstSegment.outerRadius - firstSegment.innerRadius) * (1 - 0.3) / 2;\n        ctx.save();\n        ctx.fillStyle = firstSegment.options.backgroundColor;\n        ctx.beginPath();\n        ctx.arc(firstSegment.x, firstSegment.y, firstSegment.outerRadius - gap, 0, 2 * Math.PI);\n        ctx.arc(firstSegment.x, firstSegment.y, firstSegment.innerRadius + gap, 0, 2 * Math.PI, true);\n        ctx.closePath();\n        ctx.fill();\n        ctx.restore();\n      }\n    };\n  }, []);\n  const CustomSmallLegendDoughnutPlugin = React.useMemo(() => {\n    return {\n      id: 'htmlLegendDoughnutSmall',\n      afterUpdate: (chart, args, options) => {\n        const items = chart.options.plugins.legend.labels.generateLabels(chart);\n        ReactDOM.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: items.map(legend => {\n            const {\n              strokeStyle,\n              text,\n              index,\n              hidden\n            } = legend;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-small text-muted text\",\n                children: text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cta-3 text-primary value\",\n                children: [chart.data.datasets[0].data[0], \" / \", chart.data.datasets[0].data[1] + chart.data.datasets[0].data[0]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this)]\n            }, `customLegend${index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false), legendRef.current);\n      }\n    };\n  }, []);\n  const SmallCenterTextPlugin = React.useMemo(() => {\n    return {\n      id: 'centerTextPlugin',\n      afterDraw: (chart, args, options) => {\n        const {\n          chartArea,\n          ctx,\n          _metasets,\n          data: {\n            datasets\n          }\n        } = chart;\n        const {\n          right,\n          bottom\n        } = chartArea;\n        const activeValue = datasets[0].data[0];\n        const {\n          total\n        } = _metasets[0];\n        let activePercentage = parseFloat((activeValue / total * 100).toFixed(1));\n        activePercentage = datasets[0].data[0] / total;\n        activePercentage = parseFloat((activePercentage * 100).toFixed(1));\n        ctx.font = `12px${themeValues.font}`;\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = themeValues.primary;\n        const text = `${activePercentage}%`;\n        const textX = Math.round((right - ctx.measureText(text).width) / 2);\n        const textY = bottom / 2;\n        ctx.fillText(text, textX, textY);\n        ctx.save();\n      }\n    };\n  }, [themeValues]);\n  const data = React.useMemo(() => {\n    return {\n      labels: ['PRODUCTION'],\n      datasets: [{\n        data: [12, 6],\n        backgroundColor: [themeValues.primary, 'rgba(0,0,0,0)'],\n        borderWidth: 0,\n        fill: true\n      }]\n    };\n  }, [themeValues]);\n  const config = React.useMemo(() => {\n    return {\n      type: 'doughnut',\n      plugins: [CustomSmallLegendDoughnutPlugin, SmallCenterTextPlugin, SmallDoughnutChartPlugin],\n      options: {\n        plugins: {\n          crosshair: false,\n          datalabels: false,\n          tooltip: false,\n          legend: {\n            display: false\n          },\n          streaming: false\n        },\n        aspectRatio: 1,\n        responsive: true,\n        maintainAspectRatio: false,\n        cutout: 27,\n        title: {\n          display: true\n        }\n      },\n      data\n    };\n  }, [data, CustomSmallLegendDoughnutPlugin, SmallCenterTextPlugin, SmallDoughnutChartPlugin]);\n  useEffect(() => {\n    let myChart = null;\n\n    if (chartContainer && chartContainer.current) {\n      Chart.register(...registerables);\n      myChart = new Chart(chartContainer.current, config);\n    }\n\n    return () => {\n      if (myChart) {\n        myChart.destroy();\n      }\n    };\n  }, [config]);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    className: \"g-0 d-flex w-100\",\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      ref: legendRef,\n      className: \"sh-8 d-flex flex-column justify-content-center custom-legend-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      xs: \"auto\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartContainer,\n        className: \"sw-8 sh-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChartSmallDoughnutChart2, \"zhFjqcsDXiIPx8FaFHMJKeWvIU8=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChartSmallDoughnutChart2;\nexport default _c2 = /*#__PURE__*/React.memo(ChartSmallDoughnutChart2);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartSmallDoughnutChart2\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/charles/React_JS_Reference/08-03-21/newExcelsior/excelsior/src/views/services/components/ChartSmallDoughnutChart2.js"],"names":["React","useEffect","useRef","ReactDOM","Chart","registerables","useSelector","Col","Row","ChartSmallDoughnutChart2","themeValues","state","settings","chartContainer","legendRef","SmallDoughnutChartPlugin","useMemo","id","afterDraw","chart","args","options","ctx","firstSegment","getDatasetMeta","data","gap","outerRadius","innerRadius","save","fillStyle","backgroundColor","beginPath","arc","x","y","Math","PI","closePath","fill","restore","CustomSmallLegendDoughnutPlugin","afterUpdate","items","plugins","legend","labels","generateLabels","render","map","strokeStyle","text","index","hidden","datasets","current","SmallCenterTextPlugin","chartArea","_metasets","right","bottom","activeValue","total","activePercentage","parseFloat","toFixed","font","textBaseline","primary","textX","round","measureText","width","textY","fillText","borderWidth","config","type","crosshair","datalabels","tooltip","display","streaming","aspectRatio","responsive","maintainAspectRatio","cutout","title","myChart","register","destroy","memo"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle,no-unused-vars */\nimport React, { useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Chart, registerables } from 'chart.js';\n\nimport { useSelector } from 'react-redux';\nimport { Col, Row } from 'react-bootstrap';\n\nconst ChartSmallDoughnutChart2 = () => {\n  const { themeValues } = useSelector((state) => state.settings);\n  const chartContainer = useRef(null);\n  const legendRef = useRef(null);\n\n  const SmallDoughnutChartPlugin = React.useMemo(() => {\n    return {\n      id: 'smallDoughnut',\n      afterDraw: (chart, args, options) => {\n        const { ctx } = chart;\n        const firstSegment = chart.getDatasetMeta(0).data[0];\n        const gap = ((firstSegment.outerRadius - firstSegment.innerRadius) * (1 - 0.3)) / 2;\n        ctx.save();\n        ctx.fillStyle = firstSegment.options.backgroundColor;\n        ctx.beginPath();\n        ctx.arc(firstSegment.x, firstSegment.y, firstSegment.outerRadius - gap, 0, 2 * Math.PI);\n        ctx.arc(firstSegment.x, firstSegment.y, firstSegment.innerRadius + gap, 0, 2 * Math.PI, true);\n        ctx.closePath();\n        ctx.fill();\n        ctx.restore();\n      },\n    };\n  }, []);\n  const CustomSmallLegendDoughnutPlugin = React.useMemo(() => {\n    return {\n      id: 'htmlLegendDoughnutSmall',\n      afterUpdate: (chart, args, options) => {\n        const items = chart.options.plugins.legend.labels.generateLabels(chart);\n        ReactDOM.render(\n          <>\n            {items.map((legend) => {\n              const { strokeStyle, text, index, hidden } = legend;\n              return (\n                <div key={`customLegend${index}`}>\n                  <div className=\"text-small text-muted text\">{text}</div>\n                  <div className=\"cta-3 text-primary value\">\n                    {chart.data.datasets[0].data[0]} / {chart.data.datasets[0].data[1] + chart.data.datasets[0].data[0]}\n                  </div>\n                </div>\n              );\n            })}\n          </>,\n          legendRef.current\n        );\n      },\n    };\n  }, []);\n  const SmallCenterTextPlugin = React.useMemo(() => {\n    return {\n      id: 'centerTextPlugin',\n      afterDraw: (chart, args, options) => {\n        const {\n          chartArea,\n          ctx,\n          _metasets,\n          data: { datasets },\n        } = chart;\n        const { right, bottom } = chartArea;\n\n        const activeValue = datasets[0].data[0];\n        const { total } = _metasets[0];\n        let activePercentage = parseFloat(((activeValue / total) * 100).toFixed(1));\n        activePercentage = datasets[0].data[0] / total;\n        activePercentage = parseFloat((activePercentage * 100).toFixed(1));\n        ctx.font = `12px${themeValues.font}`;\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = themeValues.primary;\n        const text = `${activePercentage}%`;\n        const textX = Math.round((right - ctx.measureText(text).width) / 2);\n        const textY = bottom / 2;\n        ctx.fillText(text, textX, textY);\n        ctx.save();\n      },\n    };\n  }, [themeValues]);\n\n  const data = React.useMemo(() => {\n    return {\n      labels: ['PRODUCTION'],\n      datasets: [\n        {\n          data: [12, 6],\n          backgroundColor: [themeValues.primary, 'rgba(0,0,0,0)'],\n          borderWidth: 0,\n          fill: true,\n        },\n      ],\n    };\n  }, [themeValues]);\n  const config = React.useMemo(() => {\n    return {\n      type: 'doughnut',\n      plugins: [CustomSmallLegendDoughnutPlugin, SmallCenterTextPlugin, SmallDoughnutChartPlugin],\n      options: {\n        plugins: {\n          crosshair: false,\n          datalabels: false,\n          tooltip: false,\n          legend: {\n            display: false,\n          },\n          streaming: false,\n        },\n        aspectRatio: 1,\n        responsive: true,\n        maintainAspectRatio: false,\n        cutout: 27,\n        title: {\n          display: true,\n        },\n      },\n      data,\n    };\n  }, [data, CustomSmallLegendDoughnutPlugin, SmallCenterTextPlugin, SmallDoughnutChartPlugin]);\n\n  useEffect(() => {\n    let myChart = null;\n    if (chartContainer && chartContainer.current) {\n      Chart.register(...registerables);\n      myChart = new Chart(chartContainer.current, config);\n    }\n    return () => {\n      if (myChart) {\n        myChart.destroy();\n      }\n    };\n  }, [config]);\n\n  return (\n    <Row className=\"g-0 d-flex w-100\">\n      <Col ref={legendRef} className=\"sh-8 d-flex flex-column justify-content-center custom-legend-container\" />\n      <Col xs=\"auto\">\n        <canvas ref={chartContainer} className=\"sw-8 sh-8\" />\n      </Col>\n    </Row>\n  );\n};\n\nexport default React.memo(ChartSmallDoughnutChart2);\n"]},"metadata":{},"sourceType":"module"}