{"ast":null,"code":"/*!\n * chartjs-adapter-luxon v1.1.0\n * https://www.chartjs.org\n * (c) 2021 chartjs-adapter-luxon Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { DateTime } from 'luxon';\nconst FORMATS = {\n  datetime: DateTime.DATETIME_MED_WITH_SECONDS,\n  millisecond: 'h:mm:ss.SSS a',\n  second: DateTime.TIME_WITH_SECONDS,\n  minute: DateTime.TIME_SIMPLE,\n  hour: {\n    hour: 'numeric'\n  },\n  day: {\n    day: 'numeric',\n    month: 'short'\n  },\n  week: 'DD',\n  month: {\n    month: 'short',\n    year: 'numeric'\n  },\n  quarter: \"'Q'q - yyyy\",\n  year: {\n    year: 'numeric'\n  }\n};\n\n_adapters._date.override({\n  _id: 'luxon',\n  // DEBUG\n\n  /**\n   * @private\n   */\n  _create: function (time) {\n    return DateTime.fromMillis(time, this.options);\n  },\n  formats: function () {\n    return FORMATS;\n  },\n  parse: function (value, format) {\n    const options = this.options;\n\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    const type = typeof value;\n\n    if (type === 'number') {\n      value = this._create(value);\n    } else if (type === 'string') {\n      if (typeof format === 'string') {\n        value = DateTime.fromFormat(value, format, options);\n      } else {\n        value = DateTime.fromISO(value, options);\n      }\n    } else if (value instanceof Date) {\n      value = DateTime.fromJSDate(value, options);\n    } else if (type === 'object' && !(value instanceof DateTime)) {\n      value = DateTime.fromObject(value);\n    }\n\n    return value.isValid ? value.valueOf() : null;\n  },\n  format: function (time, format) {\n    const datetime = this._create(time);\n\n    return typeof format === 'string' ? datetime.toFormat(format, this.options) : datetime.toLocaleString(format);\n  },\n  add: function (time, amount, unit) {\n    const args = {};\n    args[unit] = amount;\n    return this._create(time).plus(args).valueOf();\n  },\n  diff: function (max, min, unit) {\n    return this._create(max).diff(this._create(min)).as(unit).valueOf();\n  },\n  startOf: function (time, unit, weekday) {\n    if (unit === 'isoWeek') {\n      weekday = Math.trunc(Math.min(Math.max(0, weekday), 6));\n\n      const dateTime = this._create(time);\n\n      return dateTime.minus({\n        days: (dateTime.weekday - weekday + 7) % 7\n      }).startOf('day').valueOf();\n    }\n\n    return unit ? this._create(time).startOf(unit).valueOf() : time;\n  },\n  endOf: function (time, unit) {\n    return this._create(time).endOf(unit).valueOf();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}