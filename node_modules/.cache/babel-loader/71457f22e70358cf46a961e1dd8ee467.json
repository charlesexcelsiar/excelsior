{"ast":null,"code":"var _jsxFileName = \"/home/charles/React_JS_Reference/08-03-21/newExcelsior/excelsior/src/views/dashboard/components/ChartStreamingBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport ChartStreaming from 'chartjs-plugin-streaming';\nimport 'chartjs-adapter-luxon';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartStreamingBar = () => {\n  _s();\n\n  const {\n    themeValues\n  } = useSelector(state => state.settings);\n  const chartContainer = useRef(null);\n  const ChartTooltip = React.useMemo(() => {\n    return {\n      enabled: true,\n      position: 'nearest',\n      backgroundColor: themeValues.foreground,\n      titleColor: themeValues.primary,\n      titleFont: themeValues.font,\n      bodyColor: themeValues.body,\n      bodyFont: themeValues.font,\n      bodySpacing: 10,\n      padding: 15,\n      borderColor: themeValues.separator,\n      borderWidth: 1,\n      cornerRadius: parseInt(themeValues.borderRadiusMd, 10),\n      displayColors: false,\n      intersect: true,\n      mode: 'point'\n    };\n  }, [themeValues]);\n\n  const onRefresh = chart => {\n    chart.config.data.datasets.forEach(dataset => {\n      dataset.data.push({\n        x: new Date(),\n        y: Math.round(Math.random() * 50) + 25\n      });\n    });\n  };\n\n  const data = React.useMemo(() => {\n    return {\n      labels: [],\n      datasets: [{\n        label: 'Breads',\n        data: [],\n        borderColor: themeValues.primary,\n        backgroundColor: `rgba(${themeValues.primaryrgb},0.1)`\n      }]\n    };\n  }, [themeValues]);\n  const config = React.useMemo(() => {\n    return {\n      type: 'bar',\n      plugins: [ChartStreaming],\n      options: {\n        layout: {\n          padding: 0\n        },\n        elements: {\n          bar: {\n            borderWidth: 1.5,\n            borderRadius: parseInt(themeValues.borderRadiusMd, 10),\n            borderSkipped: 'bottom',\n            barPercentage: 1\n          }\n        },\n        showLine: true,\n        plugins: {\n          tooltip: ChartTooltip,\n          crosshair: false,\n          datalabels: false,\n          legend: false,\n          streaming: {\n            frameRate: 30\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            type: 'linear',\n            min: 0,\n            max: 100,\n            grid: {\n              display: true,\n              lineWidth: 1,\n              color: themeValues.separatorLight,\n              drawBorder: false\n            },\n            ticks: {\n              beginAtZero: true,\n              padding: 8,\n              fontColor: themeValues.alternate,\n              stepSize: 25\n            }\n          },\n          x: {\n            type: 'realtime',\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            },\n            realtime: {\n              duration: 20000,\n              refresh: 1000,\n              delay: 3000,\n              onRefresh\n            }\n          }\n        }\n      },\n      data\n    };\n  }, [themeValues, data, ChartTooltip]);\n  useEffect(() => {\n    let myChart = null;\n\n    if (chartContainer && chartContainer.current) {\n      Chart.register(...registerables);\n      myChart = new Chart(chartContainer.current, config);\n    }\n\n    return () => {\n      if (myChart) {\n        myChart.destroy();\n      }\n    };\n  }, [config]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartContainer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ChartStreamingBar, \"rmItzNGVysd5BfNPWW+q0Op1D3Q=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChartStreamingBar;\nexport default _c2 = /*#__PURE__*/React.memo(ChartStreamingBar);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartStreamingBar\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/charles/React_JS_Reference/08-03-21/newExcelsior/excelsior/src/views/dashboard/components/ChartStreamingBar.js"],"names":["React","useEffect","useRef","Chart","registerables","ChartStreaming","useSelector","ChartStreamingBar","themeValues","state","settings","chartContainer","ChartTooltip","useMemo","enabled","position","backgroundColor","foreground","titleColor","primary","titleFont","font","bodyColor","body","bodyFont","bodySpacing","padding","borderColor","separator","borderWidth","cornerRadius","parseInt","borderRadiusMd","displayColors","intersect","mode","onRefresh","chart","config","data","datasets","forEach","dataset","push","x","Date","y","Math","round","random","labels","label","primaryrgb","type","plugins","options","layout","elements","bar","borderRadius","borderSkipped","barPercentage","showLine","tooltip","crosshair","datalabels","legend","streaming","frameRate","responsive","maintainAspectRatio","scales","min","max","grid","display","lineWidth","color","separatorLight","drawBorder","ticks","beginAtZero","fontColor","alternate","stepSize","realtime","duration","refresh","delay","myChart","current","register","destroy","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport ChartStreaming from 'chartjs-plugin-streaming';\nimport 'chartjs-adapter-luxon';\n\nimport { useSelector } from 'react-redux';\n\nconst ChartStreamingBar = () => {\n  const { themeValues } = useSelector((state) => state.settings);\n  const chartContainer = useRef(null);\n  const ChartTooltip = React.useMemo(() => {\n    return {\n      enabled: true,\n      position: 'nearest',\n      backgroundColor: themeValues.foreground,\n      titleColor: themeValues.primary,\n      titleFont: themeValues.font,\n      bodyColor: themeValues.body,\n      bodyFont: themeValues.font,\n      bodySpacing: 10,\n      padding: 15,\n      borderColor: themeValues.separator,\n      borderWidth: 1,\n      cornerRadius: parseInt(themeValues.borderRadiusMd, 10),\n      displayColors: false,\n      intersect: true,\n      mode: 'point',\n    };\n  }, [themeValues]);\n\n  const onRefresh = (chart) => {\n    chart.config.data.datasets.forEach((dataset) => {\n      dataset.data.push({\n        x: new Date(),\n        y: Math.round(Math.random() * 50) + 25,\n      });\n    });\n  };\n\n  const data = React.useMemo(() => {\n    return {\n      labels: [],\n      datasets: [\n        {\n          label: 'Breads',\n          data: [],\n          borderColor: themeValues.primary,\n          backgroundColor: `rgba(${themeValues.primaryrgb},0.1)`,\n        },\n      ],\n    };\n  }, [themeValues]);\n  const config = React.useMemo(() => {\n    return {\n      type: 'bar',\n      plugins: [ChartStreaming],\n      options: {\n        layout: {\n          padding: 0,\n        },\n        elements: {\n          bar: {\n            borderWidth: 1.5,\n            borderRadius: parseInt(themeValues.borderRadiusMd, 10),\n            borderSkipped: 'bottom',\n            barPercentage: 1,\n          },\n        },\n        showLine: true,\n        plugins: {\n          tooltip: ChartTooltip,\n          crosshair: false,\n          datalabels: false,\n          legend: false,\n          streaming: {\n            frameRate: 30,\n          },\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            type: 'linear',\n            min: 0,\n            max: 100,\n            grid: { display: true, lineWidth: 1, color: themeValues.separatorLight, drawBorder: false },\n            ticks: { beginAtZero: true, padding: 8, fontColor: themeValues.alternate, stepSize: 25 },\n          },\n          x: {\n            type: 'realtime',\n            grid: { display: false },\n            ticks: { display: false },\n            realtime: {\n              duration: 20000,\n              refresh: 1000,\n              delay: 3000,\n              onRefresh,\n            },\n          },\n        },\n      },\n      data,\n    };\n  }, [themeValues, data, ChartTooltip]);\n\n  useEffect(() => {\n    let myChart = null;\n    if (chartContainer && chartContainer.current) {\n      Chart.register(...registerables);\n\n      myChart = new Chart(chartContainer.current, config);\n    }\n    return () => {\n      if (myChart) {\n        myChart.destroy();\n      }\n    };\n  }, [config]);\n\n  return <canvas ref={chartContainer} />;\n};\n\nexport default React.memo(ChartStreamingBar);\n"]},"metadata":{},"sourceType":"module"}