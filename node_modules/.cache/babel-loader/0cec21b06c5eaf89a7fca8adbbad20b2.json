{"ast":null,"code":"var _jsxFileName = \"/home/charles/React_JS_Reference/08-03-21/newExcelsior/excelsior/src/views/dashboard/components/ChartStreamingLine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport ChartStreaming from 'chartjs-plugin-streaming';\nimport 'chartjs-adapter-luxon';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartStreamingLine = () => {\n  _s();\n\n  const {\n    themeValues\n  } = useSelector(state => state.settings);\n  const chartContainer = useRef(null);\n  const ChartTooltip = React.useMemo(() => {\n    return {\n      enabled: true,\n      position: 'nearest',\n      backgroundColor: themeValues.foreground,\n      titleColor: themeValues.primary,\n      titleFont: themeValues.font,\n      bodyColor: themeValues.body,\n      bodyFont: themeValues.font,\n      bodySpacing: 10,\n      padding: 15,\n      borderColor: themeValues.separator,\n      borderWidth: 1,\n      cornerRadius: parseInt(themeValues.borderRadiusMd, 10),\n      displayColors: false,\n      intersect: true,\n      mode: 'index'\n    };\n  }, [themeValues]);\n\n  const onRefresh = chart => {\n    chart.config.data.datasets.forEach(dataset => {\n      dataset.data.push({\n        x: new Date(),\n        y: Math.round(Math.random() * 50) + 25\n      });\n    });\n  };\n\n  const data = React.useMemo(() => {\n    return {\n      labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      datasets: [{\n        label: '',\n        borderColor: themeValues.primary,\n        pointBackgroundColor: themeValues.primary,\n        pointBorderColor: themeValues.primary,\n        pointHoverBackgroundColor: themeValues.primary,\n        pointHoverBorderColor: themeValues.primary,\n        borderWidth: 2,\n        pointRadius: 2,\n        pointBorderWidth: 2,\n        pointHoverRadius: 3,\n        fill: false\n      }]\n    };\n  }, [themeValues]);\n  const config = React.useMemo(() => {\n    return {\n      type: 'line',\n      plugins: [ChartDataLabels, ChartStreaming],\n      options: {\n        layout: {\n          padding: 0\n        },\n        elements: {\n          line: {\n            cubicInterpolationMode: 'monotone'\n          }\n        },\n        showLine: true,\n        plugins: {\n          tooltip: ChartTooltip,\n          crosshair: false,\n          datalabels: false,\n          legend: false,\n          streaming: {\n            frameRate: 30\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            type: 'linear',\n            min: 0,\n            max: 100,\n            grid: {\n              display: true,\n              lineWidth: 1,\n              color: themeValues.separatorLight,\n              drawBorder: false\n            },\n            ticks: {\n              beginAtZero: true,\n              padding: 8,\n              fontColor: themeValues.alternate,\n              stepSize: 25\n            }\n          },\n          x: {\n            type: 'realtime',\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            },\n            realtime: {\n              duration: 20000,\n              refresh: 1000,\n              delay: 3000,\n              onRefresh\n            }\n          }\n        }\n      },\n      data\n    };\n  }, [themeValues, data, ChartTooltip]);\n  useEffect(() => {\n    let myChart = null;\n\n    if (chartContainer && chartContainer.current) {\n      Chart.register(...registerables, ChartStreaming);\n      myChart = new Chart(chartContainer.current, config);\n    }\n\n    return () => {\n      if (myChart) {\n        myChart.destroy();\n      }\n    };\n  }, [config]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartContainer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ChartStreamingLine, \"rmItzNGVysd5BfNPWW+q0Op1D3Q=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChartStreamingLine;\nexport default _c2 = /*#__PURE__*/React.memo(ChartStreamingLine);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartStreamingLine\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/charles/React_JS_Reference/08-03-21/newExcelsior/excelsior/src/views/dashboard/components/ChartStreamingLine.js"],"names":["React","useEffect","useRef","Chart","registerables","ChartDataLabels","ChartStreaming","useSelector","ChartStreamingLine","themeValues","state","settings","chartContainer","ChartTooltip","useMemo","enabled","position","backgroundColor","foreground","titleColor","primary","titleFont","font","bodyColor","body","bodyFont","bodySpacing","padding","borderColor","separator","borderWidth","cornerRadius","parseInt","borderRadiusMd","displayColors","intersect","mode","onRefresh","chart","config","data","datasets","forEach","dataset","push","x","Date","y","Math","round","random","labels","label","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointRadius","pointBorderWidth","pointHoverRadius","fill","type","plugins","options","layout","elements","line","cubicInterpolationMode","showLine","tooltip","crosshair","datalabels","legend","streaming","frameRate","responsive","maintainAspectRatio","scales","min","max","grid","display","lineWidth","color","separatorLight","drawBorder","ticks","beginAtZero","fontColor","alternate","stepSize","realtime","duration","refresh","delay","myChart","current","register","destroy","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAO,uBAAP;AAEA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAkBF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAAnC;AACA,QAAMC,cAAc,GAAGV,MAAM,CAAC,IAAD,CAA7B;AACA,QAAMW,YAAY,GAAGb,KAAK,CAACc,OAAN,CAAc,MAAM;AACvC,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,QAAQ,EAAE,SAFL;AAGLC,MAAAA,eAAe,EAAER,WAAW,CAACS,UAHxB;AAILC,MAAAA,UAAU,EAAEV,WAAW,CAACW,OAJnB;AAKLC,MAAAA,SAAS,EAAEZ,WAAW,CAACa,IALlB;AAMLC,MAAAA,SAAS,EAAEd,WAAW,CAACe,IANlB;AAOLC,MAAAA,QAAQ,EAAEhB,WAAW,CAACa,IAPjB;AAQLI,MAAAA,WAAW,EAAE,EARR;AASLC,MAAAA,OAAO,EAAE,EATJ;AAULC,MAAAA,WAAW,EAAEnB,WAAW,CAACoB,SAVpB;AAWLC,MAAAA,WAAW,EAAE,CAXR;AAYLC,MAAAA,YAAY,EAAEC,QAAQ,CAACvB,WAAW,CAACwB,cAAb,EAA6B,EAA7B,CAZjB;AAaLC,MAAAA,aAAa,EAAE,KAbV;AAcLC,MAAAA,SAAS,EAAE,IAdN;AAeLC,MAAAA,IAAI,EAAE;AAfD,KAAP;AAiBD,GAlBoB,EAkBlB,CAAC3B,WAAD,CAlBkB,CAArB;;AAoBA,QAAM4B,SAAS,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,MAAN,CAAaC,IAAb,CAAkBC,QAAlB,CAA2BC,OAA3B,CAAoCC,OAAD,IAAa;AAC9CA,MAAAA,OAAO,CAACH,IAAR,CAAaI,IAAb,CAAkB;AAChBC,QAAAA,CAAC,EAAE,IAAIC,IAAJ,EADa;AAEhBC,QAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC;AAFpB,OAAlB;AAID,KALD;AAMD,GAPD;;AASA,QAAMV,IAAI,GAAGxC,KAAK,CAACc,OAAN,CAAc,MAAM;AAC/B,WAAO;AACLqC,MAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CADH;AAELV,MAAAA,QAAQ,EAAE,CACR;AACEW,QAAAA,KAAK,EAAE,EADT;AAEExB,QAAAA,WAAW,EAAEnB,WAAW,CAACW,OAF3B;AAGEiC,QAAAA,oBAAoB,EAAE5C,WAAW,CAACW,OAHpC;AAIEkC,QAAAA,gBAAgB,EAAE7C,WAAW,CAACW,OAJhC;AAKEmC,QAAAA,yBAAyB,EAAE9C,WAAW,CAACW,OALzC;AAMEoC,QAAAA,qBAAqB,EAAE/C,WAAW,CAACW,OANrC;AAOEU,QAAAA,WAAW,EAAE,CAPf;AAQE2B,QAAAA,WAAW,EAAE,CARf;AASEC,QAAAA,gBAAgB,EAAE,CATpB;AAUEC,QAAAA,gBAAgB,EAAE,CAVpB;AAWEC,QAAAA,IAAI,EAAE;AAXR,OADQ;AAFL,KAAP;AAkBD,GAnBY,EAmBV,CAACnD,WAAD,CAnBU,CAAb;AAoBA,QAAM8B,MAAM,GAAGvC,KAAK,CAACc,OAAN,CAAc,MAAM;AACjC,WAAO;AACL+C,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,OAAO,EAAE,CAACzD,eAAD,EAAkBC,cAAlB,CAFJ;AAGLyD,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AACNrC,UAAAA,OAAO,EAAE;AADH,SADD;AAIPsC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE;AACJC,YAAAA,sBAAsB,EAAE;AADpB;AADE,SAJH;AASPC,QAAAA,QAAQ,EAAE,IATH;AAUPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,OAAO,EAAExD,YADF;AAEPyD,UAAAA,SAAS,EAAE,KAFJ;AAGPC,UAAAA,UAAU,EAAE,KAHL;AAIPC,UAAAA,MAAM,EAAE,KAJD;AAKPC,UAAAA,SAAS,EAAE;AACTC,YAAAA,SAAS,EAAE;AADF;AALJ,SAVF;AAmBPC,QAAAA,UAAU,EAAE,IAnBL;AAoBPC,QAAAA,mBAAmB,EAAE,KApBd;AAqBPC,QAAAA,MAAM,EAAE;AACN9B,UAAAA,CAAC,EAAE;AACDc,YAAAA,IAAI,EAAE,QADL;AAEDiB,YAAAA,GAAG,EAAE,CAFJ;AAGDC,YAAAA,GAAG,EAAE,GAHJ;AAIDC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,OAAO,EAAE,IAAX;AAAiBC,cAAAA,SAAS,EAAE,CAA5B;AAA+BC,cAAAA,KAAK,EAAE1E,WAAW,CAAC2E,cAAlD;AAAkEC,cAAAA,UAAU,EAAE;AAA9E,aAJL;AAKDC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,WAAW,EAAE,IAAf;AAAqB5D,cAAAA,OAAO,EAAE,CAA9B;AAAiC6D,cAAAA,SAAS,EAAE/E,WAAW,CAACgF,SAAxD;AAAmEC,cAAAA,QAAQ,EAAE;AAA7E;AALN,WADG;AAQN7C,UAAAA,CAAC,EAAE;AACDgB,YAAAA,IAAI,EAAE,UADL;AAEDmB,YAAAA,IAAI,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAFL;AAGDK,YAAAA,KAAK,EAAE;AAAEL,cAAAA,OAAO,EAAE;AAAX,aAHN;AAIDU,YAAAA,QAAQ,EAAE;AACRC,cAAAA,QAAQ,EAAE,KADF;AAERC,cAAAA,OAAO,EAAE,IAFD;AAGRC,cAAAA,KAAK,EAAE,IAHC;AAIRzD,cAAAA;AAJQ;AAJT;AARG;AArBD,OAHJ;AA6CLG,MAAAA;AA7CK,KAAP;AA+CD,GAhDc,EAgDZ,CAAC/B,WAAD,EAAc+B,IAAd,EAAoB3B,YAApB,CAhDY,CAAf;AAkDAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8F,OAAO,GAAG,IAAd;;AACA,QAAInF,cAAc,IAAIA,cAAc,CAACoF,OAArC,EAA8C;AAC5C7F,MAAAA,KAAK,CAAC8F,QAAN,CAAe,GAAG7F,aAAlB,EAAiCE,cAAjC;AAEAyF,MAAAA,OAAO,GAAG,IAAI5F,KAAJ,CAAUS,cAAc,CAACoF,OAAzB,EAAkCzD,MAAlC,CAAV;AACD;;AACD,WAAO,MAAM;AACX,UAAIwD,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACG,OAAR;AACD;AACF,KAJD;AAKD,GAZQ,EAYN,CAAC3D,MAAD,CAZM,CAAT;AAcA,sBAAO;AAAQ,IAAA,GAAG,EAAE3B;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArHD;;GAAMJ,kB;UACoBD,W;;;KADpBC,kB;AAuHN,kCAAeR,KAAK,CAACmG,IAAN,CAAW3F,kBAAX,CAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport ChartStreaming from 'chartjs-plugin-streaming';\nimport 'chartjs-adapter-luxon';\n\nimport { useSelector } from 'react-redux';\n\nconst ChartStreamingLine = () => {\n  const { themeValues } = useSelector((state) => state.settings);\n  const chartContainer = useRef(null);\n  const ChartTooltip = React.useMemo(() => {\n    return {\n      enabled: true,\n      position: 'nearest',\n      backgroundColor: themeValues.foreground,\n      titleColor: themeValues.primary,\n      titleFont: themeValues.font,\n      bodyColor: themeValues.body,\n      bodyFont: themeValues.font,\n      bodySpacing: 10,\n      padding: 15,\n      borderColor: themeValues.separator,\n      borderWidth: 1,\n      cornerRadius: parseInt(themeValues.borderRadiusMd, 10),\n      displayColors: false,\n      intersect: true,\n      mode: 'index',\n    };\n  }, [themeValues]);\n\n  const onRefresh = (chart) => {\n    chart.config.data.datasets.forEach((dataset) => {\n      dataset.data.push({\n        x: new Date(),\n        y: Math.round(Math.random() * 50) + 25,\n      });\n    });\n  };\n\n  const data = React.useMemo(() => {\n    return {\n      labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      datasets: [\n        {\n          label: '',\n          borderColor: themeValues.primary,\n          pointBackgroundColor: themeValues.primary,\n          pointBorderColor: themeValues.primary,\n          pointHoverBackgroundColor: themeValues.primary,\n          pointHoverBorderColor: themeValues.primary,\n          borderWidth: 2,\n          pointRadius: 2,\n          pointBorderWidth: 2,\n          pointHoverRadius: 3,\n          fill: false,\n        },\n      ],\n    };\n  }, [themeValues]);\n  const config = React.useMemo(() => {\n    return {\n      type: 'line',\n      plugins: [ChartDataLabels, ChartStreaming],\n      options: {\n        layout: {\n          padding: 0,\n        },\n        elements: {\n          line: {\n            cubicInterpolationMode: 'monotone',\n          },\n        },\n        showLine: true,\n        plugins: {\n          tooltip: ChartTooltip,\n          crosshair: false,\n          datalabels: false,\n          legend: false,\n          streaming: {\n            frameRate: 30,\n          },\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            type: 'linear',\n            min: 0,\n            max: 100,\n            grid: { display: true, lineWidth: 1, color: themeValues.separatorLight, drawBorder: false },\n            ticks: { beginAtZero: true, padding: 8, fontColor: themeValues.alternate, stepSize: 25 },\n          },\n          x: {\n            type: 'realtime',\n            grid: { display: false },\n            ticks: { display: false },\n            realtime: {\n              duration: 20000,\n              refresh: 1000,\n              delay: 3000,\n              onRefresh,\n            },\n          },\n        },\n      },\n      data,\n    };\n  }, [themeValues, data, ChartTooltip]);\n\n  useEffect(() => {\n    let myChart = null;\n    if (chartContainer && chartContainer.current) {\n      Chart.register(...registerables, ChartStreaming);\n\n      myChart = new Chart(chartContainer.current, config);\n    }\n    return () => {\n      if (myChart) {\n        myChart.destroy();\n      }\n    };\n  }, [config]);\n\n  return <canvas ref={chartContainer} />;\n};\n\nexport default React.memo(ChartStreamingLine);\n"]},"metadata":{},"sourceType":"module"}